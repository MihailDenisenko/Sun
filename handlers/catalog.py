from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, CallbackQueryHandler, MessageHandler, filters
from utils.helpers import load_products, get_categories, get_products_by_category, format_price
from keyboards.main_menu import get_main_menu_keyboard
from config import (
    MAIN_MENU, BROWSING_CATEGORIES, VIEWING_PRODUCT, 
    SELECTING_SIZE, SELECTING_COLOR, SELECTING_QUANTITY
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å –æ—Ç–ª–∞–¥–∫–æ–π
products_data = load_products()
print(f"üéØ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products_data)}")
print(f"üéØ –ö–ª—é—á–∏ —Ç–æ–≤–∞—Ä–æ–≤: {list(products_data.keys())}")

print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
categories = get_categories(products_data)
for category in categories:
    print(f"üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category} -> callback_data: cat_{category}")

async def show_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
    print("üîç –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
    categories = get_categories(products_data)
    
    print(f"üéØ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {categories}")
    
    if not categories:
        await update.message.reply_text(
            "üòî –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—É—Å—Ç",
            reply_markup=get_main_menu_keyboard()
        )
        return MAIN_MENU
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    keyboard = []
    for category in categories:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ —á–∏—Ç–∞–µ–º—ã–µ
        category_name = get_category_display_name(category)
        keyboard.append([InlineKeyboardButton(category_name, callback_data=f"cat_{category}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    await update.message.reply_text(
        "üéΩ *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:*",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )
    
    return BROWSING_CATEGORIES

async def handle_category_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    print(f"üîç –ü–æ–ª—É—á–µ–Ω callback_data: {query.data}")
    print(f"üîç –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(query.data)}")
    
    if query.data == "back_to_main":
        print("üîç –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥'")
        await query.edit_message_text(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
            reply_markup=get_main_menu_keyboard()
        )
        return MAIN_MENU
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –¥–∞–Ω–Ω—ã—Ö
    if query.data.startswith("cat_"):
        category = query.data.replace("cat_", "")
        print(f"üîç –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: '{category}'")
    else:
        print(f"üîç –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {query.data}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_categories")]])
        )
        return BROWSING_CATEGORIES
    
    category_products = get_products_by_category(products_data, category)
    
    print(f"üéØ –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}': {list(category_products.keys())}")
    
    if not category_products:
        await query.edit_message_text(
            "üòî –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_categories")]])
        )
        return BROWSING_CATEGORIES
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    keyboard = []
    for product_key, product_data in category_products.items():
        product_name = product_data['name']
        product_price = format_price(product_data['price'])
        button_text = f"{product_name} - {product_price}"
        print(f"üéØ –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É: {button_text} -> prod_{product_key}")
        keyboard.append([
            InlineKeyboardButton(button_text, callback_data=f"prod_{product_key}")
        ])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")])
    
    category_name = get_category_display_name(category)
    await query.edit_message_text(
        f"üõçÔ∏è *{category_name}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )
    
    return VIEWING_PRODUCT

async def show_product_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    print(f"üîç –í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä: {query.data}")
    
    if query.data == "back_to_categories":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories = get_categories(products_data)
        keyboard = []
        for category in categories:
            category_name = get_category_display_name(category)
            keyboard.append([InlineKeyboardButton(category_name, callback_data=f"cat_{category}")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        await query.edit_message_text(
            "üéΩ *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:*",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        return BROWSING_CATEGORIES
    
    product_key = query.data.replace("prod_", "")
    product = products_data.get(product_key)
    
    print(f"üéØ –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∫–ª—é—á—É: '{product_key}'")
    print(f"üéØ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: {product is not None}")
    
    if not product:
        await query.edit_message_text(
            "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_categories")]])
        )
        return BROWSING_CATEGORIES
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
    message = f"""
üéΩ *{product['name']}*

üíµ *–¶–µ–Ω–∞:* {format_price(product['price'])}
üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {product['description']}

üé® *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞:* {', '.join(product['colors'])}
üìè *–†–∞–∑–º–µ—Ä—ã:* {', '.join(product['sizes'])}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–æ–≤–∞—Ä–æ–º
    keyboard = [
        [InlineKeyboardButton("üìè –í—ã–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä", callback_data=f"select_size_{product_key}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=f"cat_{product['category']}")]
    ]
    
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['current_product'] = product_key
    context.user_data['current_product_data'] = product
    
    return VIEWING_PRODUCT

async def select_size(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    product_key = query.data.replace("select_size_", "")
    product = products_data.get(product_key)
    
    if not product:
        await query.edit_message_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return MAIN_MENU
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
    keyboard = []
    for size in product['sizes']:
        keyboard.append([InlineKeyboardButton(f"üìè {size}", callback_data=f"size_{product_key}_{size}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä—É", callback_data=f"prod_{product_key}")])
    
    await query.edit_message_text(
        f"üéΩ *{product['name']}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )
    
    return SELECTING_SIZE

async def select_color(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    # data format: "size_productKey_sizeName"
    _, product_key, selected_size = query.data.split('_', 2)
    product = products_data.get(product_key)
    
    if not product:
        await query.edit_message_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return MAIN_MENU
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    context.user_data['selected_size'] = selected_size
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
    keyboard = []
    for color in product['colors']:
        keyboard.append([InlineKeyboardButton(f"üé® {color}", callback_data=f"color_{product_key}_{color}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–º–µ—Ä–∞–º", callback_data=f"select_size_{product_key}")])
    
    await query.edit_message_text(
        f"üéΩ *{product['name']}*\n"
        f"üìè –†–∞–∑–º–µ—Ä: {selected_size}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )
    
    return SELECTING_COLOR

async def select_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    query = update.callback_query
    await query.answer()
    
    # data format: "color_productKey_colorName"
    _, product_key, selected_color = query.data.split('_', 2)
    product = products_data.get(product_key)
    
    if not product:
        await query.edit_message_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return MAIN_MENU
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç –∏ —Ç–æ–≤–∞—Ä
    context.user_data['selected_color'] = selected_color
    context.user_data['current_product'] = product_key
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    keyboard = [
        [
            InlineKeyboardButton("1", callback_data=f"qty_{product_key}_1"),
            InlineKeyboardButton("2", callback_data=f"qty_{product_key}_2"), 
            InlineKeyboardButton("3", callback_data=f"qty_{product_key}_3")
        ],
        [
            InlineKeyboardButton("4", callback_data=f"qty_{product_key}_4"),
            InlineKeyboardButton("5", callback_data=f"qty_{product_key}_5"),
            InlineKeyboardButton("6", callback_data=f"qty_{product_key}_6")
        ],
        [InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data=f"custom_qty_{product_key}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ü–≤–µ—Ç–∞–º", callback_data=f"select_size_{product_key}")]
    ]
    
    selected_size = context.user_data.get('selected_size', '–Ω–µ –≤—ã–±—Ä–∞–Ω')
    
    await query.edit_message_text(
        f"üéΩ *{product['name']}*\n"
        f"üìè –†–∞–∑–º–µ—Ä: {selected_size}\n"
        f"üé® –¶–≤–µ—Ç: {selected_color}\n"
        f"üíµ –¶–µ–Ω–∞: {format_price(product['price'])}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )
    
    return SELECTING_QUANTITY

async def handle_custom_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    query = update.callback_query
    await query.answer()
    
    product_key = query.data.replace("custom_qty_", "")
    product = products_data.get(product_key)
    
    if not product:
        await query.edit_message_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return MAIN_MENU
    
    context.user_data['awaiting_custom_quantity'] = True
    
    await query.edit_message_text(
        f"üéΩ *{product['name']}*\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100):",
        parse_mode='Markdown'
    )
    
    return SELECTING_QUANTITY

async def handle_manual_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    if not context.user_data.get('awaiting_custom_quantity'):
        # –ï—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞",
            reply_markup=get_main_menu_keyboard()
        )
        return MAIN_MENU
    
    try:
        quantity = int(update.message.text)
        if quantity < 1 or quantity > 100:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100:")
            return SELECTING_QUANTITY
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")
        return SELECTING_QUANTITY
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
    product_key = context.user_data.get('current_product')
    product = products_data.get(product_key)
    
    if not product:
        await update.message.reply_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return MAIN_MENU
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    selected_size = context.user_data.get('selected_size')
    selected_color = context.user_data.get('selected_color')
    
    cart_item = {
        'product_key': product_key,
        'name': product['name'],
        'size': selected_size,
        'color': selected_color, 
        'price': product['price'],
        'quantity': quantity,
        'total': product['price'] * quantity
    }
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä–∑–∏–Ω—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if 'cart' not in context.user_data:
        context.user_data['cart'] = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    context.user_data['cart'].append(cart_item)
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('current_product', None)
    context.user_data.pop('selected_size', None)
    context.user_data.pop('selected_color', None)
    context.user_data.pop('awaiting_custom_quantity', None)
    
    await update.message.reply_text(
        f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!\n\n"
        f"üéΩ {product['name']}\n"
        f"üìè –†–∞–∑–º–µ—Ä: {selected_size}\n" 
        f"üé® –¶–≤–µ—Ç: {selected_color}\n"
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.\n"
        f"üíµ –°—É–º–º–∞: {format_price(cart_item['total'])}",
        reply_markup=get_main_menu_keyboard()
    )
    
    return MAIN_MENU



async def handle_manual_quantity_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    if not context.user_data.get('awaiting_custom_quantity'):
        # –ï—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            "ü§î –Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start",
            reply_markup=get_main_menu_keyboard()
        )
        return MAIN_MENU
    
    try:
        quantity = int(update.message.text)
        if quantity < 1 or quantity > 100:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100:")
            return SELECTING_QUANTITY
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")
        return SELECTING_QUANTITY
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
    product_key = context.user_data.get('current_product')
    product = products_data.get(product_key)
    
    if not product:
        await update.message.reply_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return MAIN_MENU
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    selected_size = context.user_data.get('selected_size')
    selected_color = context.user_data.get('selected_color')
    
    cart_item = {
        'product_key': product_key,
        'name': product['name'],
        'size': selected_size,
        'color': selected_color, 
        'price': product['price'],
        'quantity': quantity,
        'total': product['price'] * quantity
    }
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä–∑–∏–Ω—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if 'cart' not in context.user_data:
        context.user_data['cart'] = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    context.user_data['cart'].append(cart_item)
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('current_product', None)
    context.user_data.pop('selected_size', None)
    context.user_data.pop('selected_color', None)
    context.user_data.pop('awaiting_custom_quantity', None)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirmation_text = (
        f"‚úÖ *–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!*\n\n"
        f"üéΩ *{product['name']}*\n"
        f"üìè –†–∞–∑–º–µ—Ä: {selected_size}\n" 
        f"üé® –¶–≤–µ—Ç: {selected_color}\n"
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.\n"
        f"üíµ –°—É–º–º–∞: {format_price(cart_item['total'])}\n\n"
        f"üõí *–í –∫–æ—Ä–∑–∏–Ω–µ —Ç–µ–ø–µ—Ä—å {len(context.user_data['cart'])} —Ç–æ–≤–∞—Ä(–æ–≤)*"
    )
    
    await update.message.reply_text(
        confirmation_text,
        reply_markup=get_main_menu_keyboard(),
        parse_mode='Markdown'
    )
    
    return MAIN_MENU

async def add_to_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    query = update.callback_query
    await query.answer()
    
    # data format: "qty_productKey_quantity"
    _, product_key, quantity_str = query.data.split('_', 2)
    quantity = int(quantity_str)
    
    product = products_data.get(product_key)
    if not product:
        await query.edit_message_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return MAIN_MENU
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    selected_size = context.user_data.get('selected_size')
    selected_color = context.user_data.get('selected_color')
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
    cart_item = {
        'product_key': product_key,
        'name': product['name'],
        'size': selected_size,
        'color': selected_color, 
        'price': product['price'],
        'quantity': quantity,
        'total': product['price'] * quantity
    }
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä–∑–∏–Ω—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if 'cart' not in context.user_data:
        context.user_data['cart'] = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    context.user_data['cart'].append(cart_item)
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('current_product', None)
    context.user_data.pop('current_product_data', None) 
    context.user_data.pop('selected_size', None)
    context.user_data.pop('selected_color', None)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
    confirmation_text = (
        f"‚úÖ *–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!*\n\n"
        f"üéΩ *{product['name']}*\n"
        f"üìè –†–∞–∑–º–µ—Ä: {selected_size}\n" 
        f"üé® –¶–≤–µ—Ç: {selected_color}\n"
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.\n"
        f"üíµ –°—É–º–º–∞: {format_price(cart_item['total'])}\n\n"
        f"üõí *–í –∫–æ—Ä–∑–∏–Ω–µ —Ç–µ–ø–µ—Ä—å {len(context.user_data['cart'])} —Ç–æ–≤–∞—Ä(–æ–≤)*"
    )
    
    await query.edit_message_text(
        confirmation_text,
        reply_markup=get_main_menu_keyboard(),
        parse_mode='Markdown'
    )
    
    return MAIN_MENU


def get_category_display_name(category_key: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —á–∏—Ç–∞–µ–º–æ–µ"""
    category_names = {
        'headwear': 'üëí –ì–æ–ª–æ–≤–Ω—ã–µ —É–±–æ—Ä—ã',
        'hoodies': 'üß• –¢–æ–ª—Å—Ç–æ–≤–∫–∏ –∏ —Ö—É–¥–∏', 
        'pants': 'üëñ –®—Ç–∞–Ω—ã –∏ –±—Ä—é–∫–∏',
        'masks': 'üò∑ –ú–∞—Å–∫–∏ –∑–∞—â–∏—Ç–Ω—ã–µ',
        'tshirts': 'üëï –§—É—Ç–±–æ–ª–∫–∏ –∏ –º–∞–π–∫–∏'
    }
    return category_names.get(category_key, category_key)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
catalog_handlers = [
    CallbackQueryHandler(handle_category_selection, pattern="^cat_|^back_to"),
    CallbackQueryHandler(show_product_details, pattern="^prod_"),
    CallbackQueryHandler(select_size, pattern="^select_size_"),
    CallbackQueryHandler(select_color, pattern="^size_"),
    CallbackQueryHandler(select_quantity, pattern="^color_"),
    CallbackQueryHandler(handle_custom_quantity, pattern="^custom_qty_"),
    CallbackQueryHandler(add_to_cart, pattern="^qty_"),
    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_manual_quantity)
]