from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, CallbackQueryHandler
from utils.helpers import calculate_cart_total, format_price
from keyboards.main_menu import get_main_menu_keyboard, get_contact_keyboard
from config import MAIN_MENU, VIEWING_CART, AWAITING_PHONE

async def show_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã"""
    cart = context.user_data.get('cart', [])
    
    if not cart:
        await update.message.reply_text(
            "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
            reply_markup=get_main_menu_keyboard()
        )
        return MAIN_MENU
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∫–æ—Ä–∑–∏–Ω—ã
    cart_text = "üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n"
    total_amount = 0
    
    for i, item in enumerate(cart, 1):
        cart_text += f"{i}. *{item['name']}*\n"
        cart_text += f"   üìè –†–∞–∑–º–µ—Ä: {item['size']}\n"
        cart_text += f"   üé® –¶–≤–µ—Ç: {item['color']}\n" 
        cart_text += f"   üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']} —à—Ç.\n"
        cart_text += f"   üíµ –°—É–º–º–∞: {format_price(item['total'])}\n\n"
        total_amount += item['total']
    
    cart_text += f"üí∞ *–û–±—â–∞—è —Å—É–º–º–∞: {format_price(total_amount)}*"
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ—Ä–∑–∏–Ω–æ–π
    keyboard = [
        [InlineKeyboardButton("üìû –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")],
        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    
    await update.message.reply_text(
        cart_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )
    
    return VIEWING_CART

async def handle_cart_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ—Ä–∑–∏–Ω–æ–π"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_main":
        await query.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
            reply_markup=get_main_menu_keyboard()
        )
        return MAIN_MENU
    
    elif query.data == "clear_cart":
        context.user_data['cart'] = []
        # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-—Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await query.message.reply_text(
            "üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞",
            reply_markup=get_main_menu_keyboard()
        )
        await query.delete_message()
        return MAIN_MENU
    
    elif query.data == "checkout":
        cart = context.user_data.get('cart', [])
        if not cart:
            await query.message.reply_text(
                "‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
                reply_markup=get_main_menu_keyboard()
            )
            await query.delete_message()
            return MAIN_MENU
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞
        total_amount = calculate_cart_total(cart)
        
        order_summary = "üìã *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:*\n\n"
        for item in cart:
            order_summary += f"‚Ä¢ {item['name']} ({item['size']}, {item['color']}) - {item['quantity']} —à—Ç.\n"
        
        order_summary += f"\nüí∞ *–ò—Ç–æ–≥–æ: {format_price(total_amount)}*"
        order_summary += "\n\nüì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è —Å–≤—è–∑–∏:"
        
        await query.message.reply_text(
            order_summary,
            reply_markup=get_contact_keyboard(),
            parse_mode='Markdown'
        )
        await query.delete_message()
        
        return AWAITING_PHONE

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
cart_handlers = [
    CallbackQueryHandler(handle_cart_actions, pattern="^(checkout|clear_cart|back_to_main)$")
]